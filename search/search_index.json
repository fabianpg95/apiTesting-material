{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"API-Docum/swagger/","text":"Description: Is used to describe the structure of your API\u2019s, this includes: - [x] Endpoints availables - [x] Operations (GET, POST, PUT, DELETE \u2026) - [x] Input & Output paramethers Swagger UI render swagger specification (JSON or XML) to ---\u2192 Interactive API & documented","title":"Swagger"},{"location":"API-Tools/types/","text":"1.Katalon Studio Katalon Studio is an automation tool for multiple applications, such as mobile, web, desktop, and API. It supports Rest and SOAP and empowers your team with CI/CD related integrations. 2.SoapUI SoapUI is a dedicated and headless tool for functional testing, which empowers its users to test SOAP, Rest, and Web Services APIs without any hassle. It supports data-driven testing along with CI/CD integrations. Additionally, you can reuse any test code created in SoapUI. 3.Tricentis Tosca Tricentis Tosca is another amazing tool for DevOps and Agile. It supports various protocols such as TIBCO EMS, IBM MQ, etc. You can reuse the test code for test automation in this API testing tool too. 4.Apigee Apigee is a fantastic API testing tool to test performance and measure the quality of the product. It also supports APIs created with the help of other applications like Apigee, Swagger, and more. Through this tool, you can track the API\u2019s performance with error rates, API traffic, and response times measures. 5.Postman Postman API testing is a browser plugin, which is now available for both Windows and Mac operating systems. It is excellent for testers and QA teams that are not interested in dealing with integrated development environment coding, the same language that the developers used. API testing using Postman is easy and hassle-free for the QA team. 6.JMeter JMeter was originally developed for load testing. But, it is often used for functional testing. It supports test result replay and dynamic performance testing of resources. On this tool, you can work with CSV files and find parameters for API tests. 7.Rest-Assured With Rest-Assured, you can test Rest APIs with ease. It has multiple features, and the user doesn\u2019t need to write code from scratch. The user doesn\u2019t have to have expert-level knowledge of HTTP to use this API testing tool. 8.Assertible The Assertible API testing tool is designed for reliability and automation. Through this tool, you can automate your API tests in the CI/CD pipeline. The QA team can also make specific changes to the tests, which would be automatically updated. 9.Swagger Swagger API testing tool is perfect for performance, security, and functional testing. Its platform makes it easier for the QA team to manage, create, and use API tests in the CI/CD pipeline rather quickly. 10.Karate DSL Karate is a stable and unique tool for API testing. It checks the performance of the product and self-writes step definitions in Karate. As the tool automatically manages that requirement, you can directly start testing your product.","title":"API Tools"},{"location":"Auth-Authz/authn-authz/","text":"Differences: Authentication: process in which we answer the question who are you? Authorization a process in which we answer the question what are you allowed to do?","title":"Authn vs Authz"},{"location":"Auth-Authz/authn-authz/#differences","text":"Authentication: process in which we answer the question who are you? Authorization a process in which we answer the question what are you allowed to do?","title":"Differences:"},{"location":"Auth-Authz/cors/","text":"CORS Shared info between servers When a web page is opened, loading data from third-party servers is, in theory, strictly prohibited. However, there may be exceptions: if the administrators of both websites have agreed to work together, there is no reason to avoid sharing. In these cases, so-called c ross-origin resource sharing (CORS) regulates the collaboration.","title":"CORS"},{"location":"Auth-Authz/cors/#cors","text":"","title":"CORS"},{"location":"Auth-Authz/cors/#shared-info-between-servers","text":"When a web page is opened, loading data from third-party servers is, in theory, strictly prohibited. However, there may be exceptions: if the administrators of both websites have agreed to work together, there is no reason to avoid sharing. In these cases, so-called c ross-origin resource sharing (CORS) regulates the collaboration.","title":"Shared info between servers"},{"location":"Auth-Authz/saml/","text":"It is a standard which allows to users to access multiple web apps using same login credentials. SAML is frequently used in SSO and is divided in 2: Identity Providers: Responsible of identify and authenticate to the user. LDAP OKTA Microsoft Azure Active Directory Service Providers: Is the web service provider or app in which the user want to access. AWS Salesforce Microsft 365","title":"SAML"},{"location":"Auth-Authz/Authn/authn-methods/","text":"The below explained are the best practices of REST API Authentication methods. Basic Authentication HTTP Basic Authentication isn't suggested because of its inherent security vulnerabilities. This technique doesn't need cookies, session IDs, login pages, and alternative such specialty solutions. curl \"https://example.com/\" \\ -H \"Authorization: Basic bXlVczNybkBtZTpteVA0c3N3MHJk\" Bearer Authentication The bearer token permits access to a precise resource or universal resource locator and presumably could be a cryptic string, sometimes generated by the server in response to a login request. Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IlE1QVdrc1dIVmEiLCJ0eXAiOiJKV1QifQ.eyJwaWQiOiJ1cy13ZXN0LTI6ZmQ3NGQ1ZmItNGMzMS00OWYyLWIwNDUtMjVjNmRiMWNiN2IzIiwidWlkIjoiWm1RM05HUTFabUl0TkdNek1TMDBPV1l5TFdJd05EVXRNalZqTm1SaU1XTmlOMkl6Iiwic2lkIjoiYTEyNzlhYWQtZTJjNS00ZGM3LWJjOTYtYTE4ODVkMWZlNWI3Iiwic2RjIjoidXMtd2VzdC0yIiwiYXR5cGUiOiJpZGVudGl0eSIsImR0eXBlIjoiZmlyZXR2IiwidXR5cGUiOiJlbWFpbCIsImRpZCI6InRlc3RpbmdEZXZpZGVJZC1tdnBkc3NvLTE3MDI0ODMxMDQiLCJtdnBkaWQiOiIiLCJ2ZXIiOjIsImVudCI6e30sImV4cCI6MTY5MDE0OTExOCwianRpIjoiNjVlNDRiNmEtZjMwOS00MTIzLWFhNjEtYjRjZjI0MGQ0ZDFlIiwiaWF0IjoxNjU4NjEzMTE4fQ.FegjkNUl9eiDBFH4tm5Z9jKSLwyR2x_TEi16BBQj_axHaC52CaCseSeShqy485bzoNFnxdNR616u_fih_Lp5q25JFHpZxrWdyP4rxxpjXxdr_ErMlbM6Kfl2pIhvKovS0g2Mfe8_jASF8Z8Tkifr2wjO2CtRKfnes6WGqqMON5ByUIbgnUic0QsGDdCGQ-YHoD7RmZ78WTWByOcDntDJN0ksQkEtVroP1Esd4oZEr2akL1zDElM1ftDLO380jMpN_XJmd1AGkUL9b18ERnxQ2KOjJHL4QVHe-DJCzRXSvkUdh-cSP0OapjrK_EV3Qe4HQldjgaEVG9eKERYyU8kJDQ... API-Keys This method normally has an expiration date. The problem with this method is that gives access to all operations which API can do (CRUD). API keys identify projects, not users. FxVxpK4CUiFqNgMFrb854sOh4qXFykra OAuth (2.0) OAuth2 combines Authentication and Authorization to permit additional subtle scope and is designed to grant access to resources set like: remote API user's data The previous versions of this specification, OAuth 1.0 and 1.0a, were far more difficult than OAuth 2.0 OpenID Connect OpenID Connect is a simple identity layer on top of the OAuth 2.0 protocol, which allows computing clients to verify the identity of an end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the end-user in an interoperable and REST-like manner. How to Select the Right API Authentication Method Selecting the authentication method that is best for a particular API comes down to the level of security that\u2019s required to validate clients versus the ease of implementation and maintenance.","title":"Authn Methods"},{"location":"Auth-Authz/Authn/authn-methods/#basic-authentication","text":"HTTP Basic Authentication isn't suggested because of its inherent security vulnerabilities. This technique doesn't need cookies, session IDs, login pages, and alternative such specialty solutions. curl \"https://example.com/\" \\ -H \"Authorization: Basic bXlVczNybkBtZTpteVA0c3N3MHJk\" Bearer Authentication The bearer token permits access to a precise resource or universal resource locator and presumably could be a cryptic string, sometimes generated by the server in response to a login request. Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IlE1QVdrc1dIVmEiLCJ0eXAiOiJKV1QifQ.eyJwaWQiOiJ1cy13ZXN0LTI6ZmQ3NGQ1ZmItNGMzMS00OWYyLWIwNDUtMjVjNmRiMWNiN2IzIiwidWlkIjoiWm1RM05HUTFabUl0TkdNek1TMDBPV1l5TFdJd05EVXRNalZqTm1SaU1XTmlOMkl6Iiwic2lkIjoiYTEyNzlhYWQtZTJjNS00ZGM3LWJjOTYtYTE4ODVkMWZlNWI3Iiwic2RjIjoidXMtd2VzdC0yIiwiYXR5cGUiOiJpZGVudGl0eSIsImR0eXBlIjoiZmlyZXR2IiwidXR5cGUiOiJlbWFpbCIsImRpZCI6InRlc3RpbmdEZXZpZGVJZC1tdnBkc3NvLTE3MDI0ODMxMDQiLCJtdnBkaWQiOiIiLCJ2ZXIiOjIsImVudCI6e30sImV4cCI6MTY5MDE0OTExOCwianRpIjoiNjVlNDRiNmEtZjMwOS00MTIzLWFhNjEtYjRjZjI0MGQ0ZDFlIiwiaWF0IjoxNjU4NjEzMTE4fQ.FegjkNUl9eiDBFH4tm5Z9jKSLwyR2x_TEi16BBQj_axHaC52CaCseSeShqy485bzoNFnxdNR616u_fih_Lp5q25JFHpZxrWdyP4rxxpjXxdr_ErMlbM6Kfl2pIhvKovS0g2Mfe8_jASF8Z8Tkifr2wjO2CtRKfnes6WGqqMON5ByUIbgnUic0QsGDdCGQ-YHoD7RmZ78WTWByOcDntDJN0ksQkEtVroP1Esd4oZEr2akL1zDElM1ftDLO380jMpN_XJmd1AGkUL9b18ERnxQ2KOjJHL4QVHe-DJCzRXSvkUdh-cSP0OapjrK_EV3Qe4HQldjgaEVG9eKERYyU8kJDQ...","title":"Basic Authentication"},{"location":"Auth-Authz/Authn/authn-methods/#api-keys","text":"This method normally has an expiration date. The problem with this method is that gives access to all operations which API can do (CRUD). API keys identify projects, not users. FxVxpK4CUiFqNgMFrb854sOh4qXFykra","title":"API-Keys"},{"location":"Auth-Authz/Authn/authn-methods/#oauth-20","text":"OAuth2 combines Authentication and Authorization to permit additional subtle scope and is designed to grant access to resources set like: remote API user's data The previous versions of this specification, OAuth 1.0 and 1.0a, were far more difficult than OAuth 2.0","title":"OAuth (2.0)"},{"location":"Auth-Authz/Authn/authn-methods/#openid-connect","text":"OpenID Connect is a simple identity layer on top of the OAuth 2.0 protocol, which allows computing clients to verify the identity of an end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the end-user in an interoperable and REST-like manner.","title":"OpenID Connect"},{"location":"Auth-Authz/Authn/authn-methods/#how-to-select-the-right-api-authentication-method","text":"Selecting the authentication method that is best for a particular API comes down to the level of security that\u2019s required to validate clients versus the ease of implementation and maintenance.","title":"How to Select the Right API Authentication Method"},{"location":"Auth-Authz/Authz/authz-methods/","text":"","title":"Authz Methods"},{"location":"Fundamentals/api-test-cons/","text":"Understand API requirements What is the workflow of the application; and where is the API in that flow? Specify the API output status The code follows global standard classes The code is specified in the requirement. Focus on small functional APIs You should avoid testing more than one API in a test case. It is painful if errors occur because you will have to debug the data flow generated by API in a sequence. Organize API endpoints Leverage automation capability for API testing Automate as much as you can *(if applies) Choose a suitable automation tool Does the tool support testing the API/Web service types that your AUT (Application Under Test) is using? Does the tool support the authorization methods that your AUT services require? Choose suitable verification methods Compare the whole response body content with the expected information Compare each attribute value of the response Compare matching with regular expression","title":"API Tester - considerations"},{"location":"Fundamentals/api-test-types/","text":"","title":"Api test types"},{"location":"Fundamentals/history/","text":"","title":"Portocols API"},{"location":"Fundamentals/http-methods/","text":"","title":"HTTP methods"},{"location":"Fundamentals/introduction/","text":"Basics of REST, SOAP and GraphQL 1. SOAP - Simple Object Access Protocol SOAP operates with POST and GET as two of its basic functions. GET retrieves data from servers, while the developers use post to modify data or add extra information. 2. REST REST requests to the Uniform Resource Identifier (URI) to alter the condition of the corresponding course. Operations takes the shape of an HTTP method like GET, PUT, POST, DELETE, etc. 3. GraphQL GraphQL is used to leverage two types of requests, including mutations that change data and queries that retrieve data from server.","title":"Introduction"},{"location":"Fundamentals/introduction/#basics-of-rest-soap-and-graphql","text":"","title":"Basics of REST, SOAP and GraphQL"},{"location":"Fundamentals/introduction/#1-soap-simple-object-access-protocol","text":"SOAP operates with POST and GET as two of its basic functions. GET retrieves data from servers, while the developers use post to modify data or add extra information.","title":"1. SOAP - Simple Object Access Protocol"},{"location":"Fundamentals/introduction/#2-rest","text":"REST requests to the Uniform Resource Identifier (URI) to alter the condition of the corresponding course. Operations takes the shape of an HTTP method like GET, PUT, POST, DELETE, etc.","title":"2. REST"},{"location":"Fundamentals/introduction/#3-graphql","text":"GraphQL is used to leverage two types of requests, including mutations that change data and queries that retrieve data from server.","title":"3. GraphQL"},{"location":"Fundamentals/rest/","text":"Brief intro REST stands for REpresentational State Transfer. It means when a RESTful API is called, the server will transfer to the client a representation of the state of the requested resource. Principles of REST: Client-Server Uniform interface: Resource identification Resource Manipulation using representations Self-descriptive messages Hypermedia as the engine of application state Cacheable","title":"REST"},{"location":"Fundamentals/rest/#brief-intro","text":"REST stands for REpresentational State Transfer. It means when a RESTful API is called, the server will transfer to the client a representation of the state of the requested resource.","title":"Brief intro"},{"location":"Fundamentals/rest/#principles-of-rest","text":"Client-Server Uniform interface: Resource identification Resource Manipulation using representations Self-descriptive messages Hypermedia as the engine of application state Cacheable","title":"Principles of REST:"},{"location":"Fundamentals/status-codes/","text":"","title":"Status Codes"},{"location":"Postman/api-doc/","text":"How to publish your API collection Step 1 Publish your collection Step 2 Publish your collection Step 3","title":"API Doc"},{"location":"Postman/api-doc/#how-to-publish-your-api-collection","text":"","title":"How to publish your API collection"},{"location":"Postman/api-doc/#step-1","text":"Publish your collection","title":"Step 1"},{"location":"Postman/api-doc/#step-2","text":"Publish your collection","title":"Step 2"},{"location":"Postman/api-doc/#step-3","text":"","title":"Step 3"},{"location":"Postman/authorization/","text":"The user credentials are commonly send in \u2018headers\u2019 Cookies are sent as headers Authorization types: Inherit from parent No Auth API Key Bearer token Oauth 1.0 Oauth 2.0 JSON Web Token (JWT)","title":"Authorization"},{"location":"Postman/authorization/#authorization-types","text":"Inherit from parent No Auth API Key Bearer token Oauth 1.0 Oauth 2.0 JSON Web Token (JWT)","title":"Authorization types:"},{"location":"Postman/body/","text":"Example","title":"Body"},{"location":"Postman/body/#example","text":"","title":"Example"},{"location":"Postman/collect-envvars/","text":"","title":"Collections & Env vars"},{"location":"Postman/curl/","text":"cURL export cURL import","title":"cURL"},{"location":"Postman/curl/#curl-export","text":"","title":"cURL export"},{"location":"Postman/curl/#curl-import","text":"","title":"cURL import"},{"location":"Postman/headers/","text":"","title":"Headers"},{"location":"Postman/monitors/","text":"","title":"Monitors"},{"location":"Postman/newman/","text":"Prerequisites Export your collections and environment variables and save them in a folder of your computer. Install newman and htmlextra in your computer. Open your terminal inside the folder you created and run your collection using newman and htmlextra to verify everything is working and the HTML reports with the results were created. Run Newman CLI Newman Dashboard reports","title":"Newman CLI"},{"location":"Postman/newman/#prerequisites","text":"Export your collections and environment variables and save them in a folder of your computer. Install newman and htmlextra in your computer. Open your terminal inside the folder you created and run your collection using newman and htmlextra to verify everything is working and the HTML reports with the results were created.","title":"Prerequisites"},{"location":"Postman/newman/#run-newman-cli","text":"","title":"Run Newman CLI"},{"location":"Postman/newman/#newman-dashboard-reports","text":"","title":"Newman Dashboard reports"},{"location":"Postman/test-scripts/","text":"Function vars for scripts Test scripts","title":"Test Scripts"},{"location":"Postman/test-scripts/#function-vars-for-scripts","text":"","title":"Function vars for scripts"},{"location":"Postman/test-scripts/#test-scripts","text":"","title":"Test scripts"},{"location":"Postman/tokens/","text":"","title":"Tokens"},{"location":"Tips-Best-Practices/best-prac/","text":"Work in Progress...","title":"Best practices"},{"location":"Tips-Best-Practices/best-prac/#work-in-progress","text":"","title":"Work in Progress..."},{"location":"Tips-Best-Practices/intro/","text":"","title":"Intro"}]}