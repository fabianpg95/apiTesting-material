{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"API-Docum/swagger/","text":"Description: Is used to describe the structure of your API\u2019s, this includes: - [x] Endpoints availables - [x] Operations (GET, POST, PUT, DELETE \u2026) - [x] Input & Output paramethers Swagger UI render swagger specification (JSON or XML) to ---\u2192 Interactive API & documented","title":"Swagger"},{"location":"API-Tools/types/","text":"1.Katalon Studio Katalon Studio is an automation tool for multiple applications, such as mobile, web, desktop, and API. It supports Rest and SOAP and empowers your team with CI/CD related integrations. 2.SoapUI SoapUI is a dedicated and headless tool for functional testing, which empowers its users to test SOAP, Rest, and Web Services APIs without any hassle. It supports data-driven testing along with CI/CD integrations. Additionally, you can reuse any test code created in SoapUI. 3.Tricentis Tosca Tricentis Tosca is another amazing tool for DevOps and Agile. It supports various protocols such as TIBCO EMS, IBM MQ, etc. You can reuse the test code for test automation in this API testing tool too. 4.Apigee Apigee is a fantastic API testing tool to test performance and measure the quality of the product. It also supports APIs created with the help of other applications like Apigee, Swagger, and more. Through this tool, you can track the API\u2019s performance with error rates, API traffic, and response times measures. 5.Postman Postman API testing is a browser plugin, which is now available for both Windows and Mac operating systems. It is excellent for testers and QA teams that are not interested in dealing with integrated development environment coding, the same language that the developers used. API testing using Postman is easy and hassle-free for the QA team. 6.JMeter JMeter was originally developed for load testing. But, it is often used for functional testing. It supports test result replay and dynamic performance testing of resources. On this tool, you can work with CSV files and find parameters for API tests. 7.Rest-Assured With Rest-Assured, you can test Rest APIs with ease. It has multiple features, and the user doesn\u2019t need to write code from scratch. The user doesn\u2019t have to have expert-level knowledge of HTTP to use this API testing tool. 8.Assertible The Assertible API testing tool is designed for reliability and automation. Through this tool, you can automate your API tests in the CI/CD pipeline. The QA team can also make specific changes to the tests, which would be automatically updated. 9.Swagger Swagger API testing tool is perfect for performance, security, and functional testing. Its platform makes it easier for the QA team to manage, create, and use API tests in the CI/CD pipeline rather quickly. 10.Karate DSL Karate is a stable and unique tool for API testing. It checks the performance of the product and self-writes step definitions in Karate. As the tool automatically manages that requirement, you can directly start testing your product.","title":"API Tools"},{"location":"Auth-Authz/authn-authz/","text":"Differences: Authentication: process in which we answer the question who are you? Authorization a process in which we answer the question what are you allowed to do?","title":"Authn vs Authz"},{"location":"Auth-Authz/authn-authz/#differences","text":"Authentication: process in which we answer the question who are you? Authorization a process in which we answer the question what are you allowed to do?","title":"Differences:"},{"location":"Auth-Authz/cors/","text":"CORS Shared info between servers When a web page is opened, loading data from third-party servers is, in theory, strictly prohibited. However, there may be exceptions: if the administrators of both websites have agreed to work together, there is no reason to avoid sharing. In these cases, so-called c ross-origin resource sharing (CORS) regulates the collaboration.","title":"CORS"},{"location":"Auth-Authz/cors/#cors","text":"","title":"CORS"},{"location":"Auth-Authz/cors/#shared-info-between-servers","text":"When a web page is opened, loading data from third-party servers is, in theory, strictly prohibited. However, there may be exceptions: if the administrators of both websites have agreed to work together, there is no reason to avoid sharing. In these cases, so-called c ross-origin resource sharing (CORS) regulates the collaboration.","title":"Shared info between servers"},{"location":"Auth-Authz/saml/","text":"It is a standard which allows to users to access multiple web apps using same login credentials. SAML is frequently used in SSO and is divided in 2: Identity Providers: Responsible of identify and authenticate to the user. LDAP OKTA Microsoft Azure Active Directory Service Providers: Is the web service provider or app in which the user want to access. AWS Salesforce Microsft 365","title":"SAML"},{"location":"Auth-Authz/Authn/authn-consid/","text":"","title":"Authn consid"},{"location":"Auth-Authz/Authn/authn-methods/","text":"Sin contrase\u00f1a o Passwordless. Este es uno de los m\u00e9todos modernos m\u00e1s pr\u00e1cticos. Un ejemplo de aplicaci\u00f3n es el uso de un enlace m\u00e1gico (magic link). Consiste en que, cada vez que quieras iniciar sesi\u00f3n a un recurso o servicio, se enviar\u00e1 a tu correo electr\u00f3nico un enlace que te permitir\u00e1 acceder sin necesidad de contrase\u00f1a. Por redes sociales. Sin duda, ya habr\u00e1s utilizado este m\u00e9todo. Varias aplicaciones y servicios te dan como opci\u00f3n iniciar sesi\u00f3n directamente con alguna cuenta social. Autenticaci\u00f3n API. Este es el proceso de certificar la identidad de un usuario que quiera acceder a recursos y/o servicios en el servidor. Para tener en cuenta, alguna de las APIs de autenticaci\u00f3n m\u00e1s populares son: autenticaci\u00f3n b\u00e1sica por HTTP, de Core (n\u00facleo) API y OAuth. Autenticaci\u00f3n Biom\u00e9trica. Se vale de las huellas dactilares para validar la identidad del usuario.","title":"Authn Methods"},{"location":"Auth-Authz/Authn/authn/","text":"","title":"Authn Intro"},{"location":"Auth-Authz/Authz/authz-consid/","text":"","title":"Authz consid"},{"location":"Auth-Authz/Authz/authz-methods/","text":"Autorizaci\u00f3n HTTP. As\u00ed como la autenticaci\u00f3n, existe la autorizaci\u00f3n de tipo HTTP. \u00bfEn qu\u00e9 consiste? La persona ingresa su nombre de usuario y contrase\u00f1a para poder autenticarse. Es bueno tener presente que este m\u00e9todo no implica a las cookies, IDs de sesiones o p\u00e1ginas de inicio de sesi\u00f3n. Autorizaci\u00f3n API. As\u00ed como la autenticaci\u00f3n, existe la autorizaci\u00f3n de tipo API. Cuando el usuario intenta ganar acceso a recursos de un sistema durante su registro, se genera una clave API. Esa misma clave se empareja con un token (una ficha identificadora) que se encuentra oculto. Entonces, esa combinaci\u00f3n de clave API y token oculto es la que se utiliza constantemente cada vez que el usuario se autentica e ingresa a su entorno de recursos y servicios que puede utilizar. OAuth 2.0. Este m\u00e9todo permite que la API se autentique y acceda a los recursos del sistema que necesita. La versi\u00f3n 2.0 de OAuth es uno de los m\u00e9todos m\u00e1s seguros tanto de autenticaci\u00f3n como autorizaci\u00f3n. Autorizaci\u00f3n JWT. Es un est\u00e1ndar abierto que se utiliza para la transmisi\u00f3n segura de datos entre distintas partes. Tiene soporte tanto para la autenticaci\u00f3n como para la autorizaci\u00f3n. JWT es utilizada com\u00fanmente para la autorizaci\u00f3n, y se vale un par de claves p\u00fablico-privada. Es decir, ese par contiene una clave privada y una p\u00fablica. HTTP/2: Pretende implantarse como un est\u00e1ndar en la web. Aunque no modifica sem\u00e1nticamente el protocolo anterior, s\u00ed incluye muchas mejoras que benefician tanto a usuarios como a cualquier persona que tenga una web. Por ejemplo, HTTP/2 incluye compresi\u00f3n, necesita menos recursos, lo que implica una menor latencia, el servidor puede responder a varias peticiones al mismo tiempo\u2026 En definitiva, mejoras que tienen como objetivo una Web m\u00e1s r\u00e1pida y segura. La principal diferencia entre HTTP y HTTPS es la seguridad. El protocolo HTTPS impide que otros usuarios puedan interceptar la informaci\u00f3n que se transfiere entre el cliente y el servidor web. Sin contrase\u00f1a o Passwordless. Este es uno de los m\u00e9todos modernos m\u00e1s pr\u00e1cticos. Un ejemplo de aplicaci\u00f3n es el uso de un enlace m\u00e1gico (magic link). Consiste en que, cada vez que quieras iniciar sesi\u00f3n a un recurso o servicio, se enviar\u00e1 a tu correo electr\u00f3nico un enlace que te permitir\u00e1 acceder sin necesidad de contrase\u00f1a. Por redes sociales. Sin duda, ya habr\u00e1s utilizado este m\u00e9todo. Varias aplicaciones y servicios te dan como opci\u00f3n iniciar sesi\u00f3n directamente con alguna cuenta social. Autenticaci\u00f3n API. Este es el proceso de certificar la identidad de un usuario que quiera acceder a recursos y/o servicios en el servidor. Para tener en cuenta, alguna de las APIs de autenticaci\u00f3n m\u00e1s populares son: autenticaci\u00f3n b\u00e1sica por HTTP, de Core (n\u00facleo) API y OAuth. Autenticaci\u00f3n Biom\u00e9trica. Se vale de las huellas dactilares para validar la identidad del usuario. Autorizaci\u00f3n HTTP. As\u00ed como la autenticaci\u00f3n, existe la autorizaci\u00f3n de tipo HTTP. \u00bfEn qu\u00e9 consiste? La persona ingresa su nombre de usuario y contrase\u00f1a para poder autenticarse. Es bueno tener presente que este m\u00e9todo no implica a las cookies, IDs de sesiones o p\u00e1ginas de inicio de sesi\u00f3n. Autorizaci\u00f3n API. As\u00ed como la autenticaci\u00f3n, existe la autorizaci\u00f3n de tipo API. Cuando el usuario intenta ganar acceso a recursos de un sistema durante su registro, se genera una clave API. Esa misma clave se empareja con un token (una ficha identificadora) que se encuentra oculto. Entonces, esa combinaci\u00f3n de clave API y token oculto es la que se utiliza constantemente cada vez que el usuario se autentica e ingresa a su entorno de recursos y servicios que puede utilizar. OAuth 2.0. Este m\u00e9todo permite que la API se autentique y acceda a los recursos del sistema que necesita. La versi\u00f3n 2.0 de OAuth es uno de los m\u00e9todos m\u00e1s seguros tanto de autenticaci\u00f3n como autorizaci\u00f3n. Autorizaci\u00f3n JWT. Es un est\u00e1ndar abierto que se utiliza para la transmisi\u00f3n segura de datos entre distintas partes. Tiene soporte tanto para la autenticaci\u00f3n como para la autorizaci\u00f3n. JWT es utilizada com\u00fanmente para la autorizaci\u00f3n, y se vale un par de claves p\u00fablico-privada. Es decir, ese par contiene una clave privada y una p\u00fablica. HTTP/2: Pretende implantarse como un est\u00e1ndar en la web. Aunque no modifica sem\u00e1nticamente el protocolo anterior, s\u00ed incluye muchas mejoras que benefician tanto a usuarios como a cualquier persona que tenga una web. Por ejemplo, HTTP/2 incluye compresi\u00f3n, necesita menos recursos, lo que implica una menor latencia, el servidor puede responder a varias peticiones al mismo tiempo\u2026 En definitiva, mejoras que tienen como objetivo una Web m\u00e1s r\u00e1pida y segura. La principal diferencia entre HTTP y HTTPS es la seguridad. El protocolo HTTPS impide que otros usuarios puedan interceptar la informaci\u00f3n que se transfiere entre el cliente y el servidor web.","title":"Authz Methods"},{"location":"Auth-Authz/Authz/authz/","text":"","title":"Authz Intro"},{"location":"Fundamentals/api-test-cons/","text":"Understand API requirements What is the workflow of the application; and where is the API in that flow? Specify the API output status The code follows global standard classes The code is specified in the requirement. Focus on small functional APIs You should avoid testing more than one API in a test case. It is painful if errors occur because you will have to debug the data flow generated by API in a sequence. Organize API endpoints Leverage automation capability for API testing Automate as much as you can *(if applies) Choose a suitable automation tool Does the tool support testing the API/Web service types that your AUT (Application Under Test) is using? Does the tool support the authorization methods that your AUT services require? Choose suitable verification methods Compare the whole response body content with the expected information Compare each attribute value of the response Compare matching with regular expression","title":"API Tester - considerations"},{"location":"Fundamentals/api-test-types/","text":"","title":"Api test types"},{"location":"Fundamentals/history/","text":"","title":"Portocols API"},{"location":"Fundamentals/http-methods/","text":"","title":"HTTP methods"},{"location":"Fundamentals/introduction/","text":"Basics of REST, SOAP and GraphQL 1. SOAP - Simple Object Access Protocol SOAP operates with POST and GET as two of its basic functions. GET retrieves data from servers, while the developers use post to modify data or add extra information. 2. REST REST requests to the Uniform Resource Identifier (URI) to alter the condition of the corresponding course. Operations takes the shape of an HTTP method like GET, PUT, POST, DELETE, etc. 3. GraphQL GraphQL is used to leverage two types of requests, including mutations that change data and queries that retrieve data from server.","title":"Introduction"},{"location":"Fundamentals/introduction/#basics-of-rest-soap-and-graphql","text":"","title":"Basics of REST, SOAP and GraphQL"},{"location":"Fundamentals/introduction/#1-soap-simple-object-access-protocol","text":"SOAP operates with POST and GET as two of its basic functions. GET retrieves data from servers, while the developers use post to modify data or add extra information.","title":"1. SOAP - Simple Object Access Protocol"},{"location":"Fundamentals/introduction/#2-rest","text":"REST requests to the Uniform Resource Identifier (URI) to alter the condition of the corresponding course. Operations takes the shape of an HTTP method like GET, PUT, POST, DELETE, etc.","title":"2. REST"},{"location":"Fundamentals/introduction/#3-graphql","text":"GraphQL is used to leverage two types of requests, including mutations that change data and queries that retrieve data from server.","title":"3. GraphQL"},{"location":"Fundamentals/rest/","text":"Brief intro REST stands for REpresentational State Transfer. It means when a RESTful API is called, the server will transfer to the client a representation of the state of the requested resource. Principles of REST: Client-Server Uniform interface: Resource identification Resource Manipulation using representations Self-descriptive messages Hypermedia as the engine of application state Cacheable","title":"REST"},{"location":"Fundamentals/rest/#brief-intro","text":"REST stands for REpresentational State Transfer. It means when a RESTful API is called, the server will transfer to the client a representation of the state of the requested resource.","title":"Brief intro"},{"location":"Fundamentals/rest/#principles-of-rest","text":"Client-Server Uniform interface: Resource identification Resource Manipulation using representations Self-descriptive messages Hypermedia as the engine of application state Cacheable","title":"Principles of REST:"},{"location":"Fundamentals/status-codes/","text":"","title":"Status Codes"},{"location":"Postman/api-doc/","text":"How to publish your API collection Step 1 Publish your collection Step 2 Publish your collection Step 3","title":"API Doc"},{"location":"Postman/api-doc/#how-to-publish-your-api-collection","text":"","title":"How to publish your API collection"},{"location":"Postman/api-doc/#step-1","text":"Publish your collection","title":"Step 1"},{"location":"Postman/api-doc/#step-2","text":"Publish your collection","title":"Step 2"},{"location":"Postman/api-doc/#step-3","text":"","title":"Step 3"},{"location":"Postman/authorization/","text":"The user credentials are commonly send in \u2018headers\u2019 Cookies are sent as headers Authorization types: Inherit from parent No Auth API Key Bearer token Oauth 1.0 Oauth 2.0 JSON Web Token (JWT)","title":"Authorization"},{"location":"Postman/authorization/#authorization-types","text":"Inherit from parent No Auth API Key Bearer token Oauth 1.0 Oauth 2.0 JSON Web Token (JWT)","title":"Authorization types:"},{"location":"Postman/body/","text":"Example","title":"Body"},{"location":"Postman/body/#example","text":"","title":"Example"},{"location":"Postman/collect-envvars/","text":"","title":"Collections & Env vars"},{"location":"Postman/curl/","text":"cURL export cURL import","title":"cURL"},{"location":"Postman/curl/#curl-export","text":"","title":"cURL export"},{"location":"Postman/curl/#curl-import","text":"","title":"cURL import"},{"location":"Postman/headers/","text":"","title":"Headers"},{"location":"Postman/monitors/","text":"","title":"Monitors"},{"location":"Postman/newman/","text":"Prerequisites Export your collections and environment variables and save them in a folder of your computer. Install newman and htmlextra in your computer. Open your terminal inside the folder you created and run your collection using newman and htmlextra to verify everything is working and the HTML reports with the results were created. Run Newman CLI Newman Dashboard reports","title":"Newman CLI"},{"location":"Postman/newman/#prerequisites","text":"Export your collections and environment variables and save them in a folder of your computer. Install newman and htmlextra in your computer. Open your terminal inside the folder you created and run your collection using newman and htmlextra to verify everything is working and the HTML reports with the results were created.","title":"Prerequisites"},{"location":"Postman/newman/#run-newman-cli","text":"","title":"Run Newman CLI"},{"location":"Postman/newman/#newman-dashboard-reports","text":"","title":"Newman Dashboard reports"},{"location":"Postman/test-scripts/","text":"Function vars for scripts Test scripts","title":"Test Scripts"},{"location":"Postman/test-scripts/#function-vars-for-scripts","text":"","title":"Function vars for scripts"},{"location":"Postman/test-scripts/#test-scripts","text":"","title":"Test scripts"},{"location":"Postman/tokens/","text":"","title":"Tokens"},{"location":"Tips-Best-Practices/best-prac/","text":"Work in Progress...","title":"Best practices"},{"location":"Tips-Best-Practices/best-prac/#work-in-progress","text":"","title":"Work in Progress..."},{"location":"Tips-Best-Practices/intro/","text":"","title":"Intro"}]}